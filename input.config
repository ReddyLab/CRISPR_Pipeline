includeConfig './configs/pipeline_input.config'
includeConfig './configs/dashboard.config'

process {
    withName: anndata_concat{
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'  
    }

    withName: createGuideRef{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'  
    }

    withName: createHashingRef{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local' 
    }

    withName: seqSpecCheck {
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'   
    }

    withName:createDashboard_HASHING {
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'
    }

    withName:createDashboard{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'
    }

    withName: CreateMuData_HASHING{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'  
    }

    withName: CreateMuData{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local' 
    }
    
    withName: demultiplex{
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
    }

    withName: doublets_scrub{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'
    }

    withName: downloadReference{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'   
    }

    withName: filter_hashing{
        container = 'docker://sjiang9/conda-docker:0.1'  
        executor = 'local' 
    }

    withName: guide_assignment_mudata{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'
    }

    withName: hashing_concat{
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
    }

    withName: inference_mudata{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'
    }

    withName: mappingGuide{
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
        
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }

    withName: mappingHashing{
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
        
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }

    withName: mappingscRNA {
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
        
        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }

    withName: prepare_covariate {
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'     
    }

    withName: prepare_guide_inference {
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'      
    }

    withName: prepare_user_guide_inference{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local'   
    }

    withName: prepare_all_guide_inference{
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
    }

    withName: PreprocessAnnData{
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
    }

    withName: seqSpecParser{
        container = 'docker://sjiang9/conda-docker:0.1' 
        executor = 'local' 
    }

    withName:guide_assignment_cleanser{
        container = 'docker://sjiang9/cleanser:0.3'
        executor = 'local'

        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }

    withName:prepare_covariate {
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'  
    }

    withName:guide_assignment_sceptre{
        container = 'docker://igvf/sceptre-igvf:v0.2'
        executor = 'local'

        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }
    
    withName:inference_sceptre {
        container = 'docker://igvf/sceptre-igvf:v0.2'
        executor = 'local'

        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }

    withName:inference_perturbo {
        container = 'docker://pinellolab/perturbo-cuda:0.1'
        executor = 'local'

        errorStrategy = { task.attempt <= 3 ? 'retry' : 'terminate' }
        maxRetries = 3
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        time = { 1.hour * task.attempt }
    }

    withName:mergedResults {
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
    }

    withName: evaluation_plot {
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
    }

    withName: evaluation_undefined_plot {
        container = 'docker://sjiang9/conda-docker:0.1'
        executor = 'local'
    }

}

singularity {
    enabled = true
    autoMounts = true 
    runOptions = '--nv'
}

tower {
    enabled = false
    accessToken = "${TOWER_ACCESS_TOKEN ?: ''}"
}

trace {
    enabled = true
    file = 'pipeline_trace.txt'
}